# запись
'''
Для работы в консоли: python manage.py shell

Далее импортируется нужная модель (все в консоли): from <приложение>.models import <требуемый класс>

Затем можно создать экземпляр класса, например:
Women(title='Анджелина Джоли', content='Биография Анджелины Джоли')

При этом данные еще не записаны в таблицу. В консоли выползет:
<Women: Women object (None)>
*none = id, он же именуется как pk, это синонимы, можно посмотреть и то и другое. id = none, так как мы еще не записали
это в таблицу, а id генерируется автоматически Django.
**pk = primary key

Можно сохранить последнюю запись (сейчас это как раз экземпляр класса) с помощью w1 = _ (земля = записать последнее)

*еще можно сразу записать это в переменную: w2 = Women(title='Энн Хэтэуэй', content='Биография Энн Хэтэуэй')

**еще можно писать в БД так:
w3 = Women() (создаем пустой экземпляр)
w3.title = 'Джулия Робертс' (пишем поля)
w3.content = 'Биография Джулии Робертс' (и еще)
w3.save()

***еще w4 = Women.objects.create(title='Ума Турман', content='Биография Ума Турман')
Тут запись сразу пишется в таблицу, сохранять не нужно.
Аналогично без переменной: Women.objects.create(title='Кира Найтли', content='Биография Киры Найтли')

Чтобы записать данные в таблицу: w1.save()  (w1 потому что мы только что записали экземпляр в эту переменную)

Можно посмотреть поля какой-либо записи с помощью: w1.id, w1.pk, w1.title ...


Можно посмотреть список запросов, сначала импортируется объект: from django.db import connection
Затем смотрим его запросы: connection.queries
'''

# чтение

'''
Базовый способ прочитать все записи: Women.objects.all()
При этом вывод будет неинформативным, так как мы увидит лишь номера записей. Можно переписать ___str__ модели, например:
def __str__(self):
        return self.title
        
команда Women.objects.all() вернет список, можно записать его в переменную (например w = _) и обращаться к элементам
по индексу (w[0], w[0].title ...)

При чтении можно использовать, например, перебор:
for wi in w:
     print(wi.title)
     
Можно брать не все записи (если их много) а нужную, например так: Women.objects.filter(title='Энн Хэтэуэй')

Чтобы фильтровать >< есть:
<имя атрибута>__gte – сравнение больше или равно (>=);
<имя атрибута>__lte – сравнение меньше или равно (<=).
пример: Women.objects.filter(pk__gte=2)


Чтобы выбрать все кроме указанного условия: Women.objects.exclude(pk=2)


Сортировка: Women.objects.filter(pk__lte=4).order_by('title')
'''

# именение записи

'''
Читаем: wu = Women.objects.get(pk=2)

Переписываем:
wu.title = 'Марго Робби'
wu.content = 'Биография Марго Робби'
Сохраняем: wu.save()

Удаление: wd = Women.objects.filter(pk__gte=4)
wd.delete()
'''