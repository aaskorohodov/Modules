x = 1


'''Пример стандартной функции и аналогичной лямбды'''
def func(x):
    return x + 1

print(func(x))
print((lambda x: x + 1)(x))  # сама функция (lambda x: x + 1), а затем идет аргумент, который мы ей передаем (x)


'''Примеры работы с лямбдой'''
add_one = lambda x: x + 1  # способ назначить переменной функцию (не надо так делать, надо использовать def)
print(add_one(1))

(lambda x: print(x))(10)  # лямбда умеет вызывать методы в своем теле


'''Несколько аргументов в лямбде'''
full_name = lambda first_name, last_name: f'{first_name} {last_name}'  # аргументы перечисляются через запятую
print(full_name('Petr', 'Petrov'))


'''Пример сходства лямбды и обычной функции'''
def add(x, y): return x + y
print(add(1, 3))

add = lambda x, y: x + y
print(add(1, 3))


'''Лямбду можно переносить на другую строку, для этого нужны скобки'''
func = (lambda x:
 x + 1)


'''Пример использования лямбды для определения четности числа'''
odd_or_even = (lambda x:
 (x % 2 and 'odd' or 'even'))
'''Тут and работает как булево, он берет часть слева и справа, если обе истины, то возвращается то что справа (x % 2
вернет 1 либо 0, что можно интерпретировать как True либо False). Соответственно, если переданное число нечетное, то
x % 2 = 1, 1 пропускаем, затем or сравнивает odd и even, оба истины, возвращает первое (он уже возвращает первую
истину).'''
print(odd_or_even(6))


'''Дефолтный аргумент в лямбде'''
add_xy = lambda x, y = 1: x + y
print(add_xy(5))


'''*args'''
add_some = lambda *args: sum(args)
print(add_some(1,2,3,4,5))


'''*kwargs'''
add_some_more = lambda **kwargs: sum(kwargs.values())  # кварги превращаются в словарь внутри функции
print(add_some_more(one=1, two=2, three=3))