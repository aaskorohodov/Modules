"""
Дескрипторы это такие классы, в которых как минимум есть метод __get__. Суть в том, что тут мы в 1 место можем вынести
кучу сеттеров и геттеров, которые иначе нужно было бы писать под каждый атрибут.
"""


class Integer:
    @classmethod
    def verify_coord(cls, coord):
        """Проверка, чтобы переданные данные были int. Вызывается ниже в __set__"""
        if type(coord) != int:
            raise TypeError("Координата должна быть целым числом")

    def __set_name__(self, owner, name):
        """В этом методе мы формируем локальное свойство с именем атрибута, добавляя перед ним одно нижнее
        подчеркивание (так принято делать при определении дескрипторов). В итоге, в экземплярах классов будут храниться
        имена _x, _y, _z.
        Метод вызывается автоматически"""
        self.name = "_" + name

    def __get__(self, instance, owner):
        """
        self – это ссылка на объект Integer
        instance – ссылка на экземпляр класса pt
        owner – ссылка на класс Point3D (используется где-то внутри автоматически, тут не видно)
        """
        return getattr(instance, self.name)
        # Аналог
        # return instance.__dict__[self.name]

    def __set__(self, instance, value):
        """
        self – ссылка на объект дескриптора (экземпляр)
        instance – ссылка на объект pt, из которого произошло обращение к дескриптору
        value – присваиваемое значение
        """
        self.verify_coord(value)
        setattr(instance, self.name, value)
        # Аналог
        # instance.__dict__[self.name] = value
        # print(f"__set__: {self.name} = {value}")


class Point3D:
    """Ниже мы просто возвращаем ссылку на x,y,z, которые станут экземплярами класса-дескриптора. В классе-дескрипторе
    автоматически вызовется метод __set_name__, примерно как __init__. В этом метода будут созданы имена экземпляров
    Integer, непонятно зачем, они нигде не используются и нам на них фиолетово. Главное, ниже"""
    x = Integer()
    y = Integer()
    z = Integer()

    def __init__(self, x, y, z):
        """Тут слева (где self.x) x это не просто буква, а экземпляр Integer. То есть мы присваиваем атрибут в имя x,
        которое (так получилось) еще и экземпляр Integer. А справа от = уже то, что мы туда запишем.
        Т.е. можно принять не xyz, а abc и записать их справа и ничего не изменит. А можно записать не в self.x,
        а в self.a, и тогда pt.a не будет экземпляром Integer и мы не будем проверять его на принадлежность к int
        и делать какую-то другую логику. Ну и не будем ограничивать действия с этим атрибутом, а ведь мы можем, если
        например не прописать делитер в классе Integer, то удалять не сможем."""
        self.x = x
        self.y = y
        self.z = z


pt = Point3D(1, 2, 3)
print(pt.z)
