'''
Декораторы – способ обернуть функцию в функцию.
'''


def decor(func_to_decorate):
    '''decor готовит новую функцию (ниже), как бы собирает ее, а затем возвращает ее. Соответственно вызвать decor
    можно обычным способом:
        show = decor(show)
    После этого вызов show() выполнит уже обернутую функцию, так как show = wrapper. Но есть синтаксический сахар:
        @decor
        def show():
            print('Функция')
    Результат аналогичен
    * важно понимать, что результатом работы decor является новая функция, которая состоит из исходная + обертка.
    Но это именно функция, причем новая, так что вызывая show, мы вызываем эту новую функцию.
    '''
    def wrapper():
        print('Код до функции')
        func_to_decorate()
        print('Код после функции')
    return wrapper


# @decor
# def show():
#     print('Функция')


'''
Функцию также можно обернуть в несколько декораторов, ниже пример.
'''


def decor2(func_to_decorate):
    def wrapper():
        print('Другой код до функции')
        func_to_decorate()
        print('Другой код после функции')
    return wrapper


@decor
@decor2
def show():
    print('Функция')


show()