'''
Ниже представлен пример декоратора, в котором локальная переменная name не пропадает после работы функции, а сохраняется
в переменной. Таким образом, можно единожды вызвать декоратор передав ему значение, а затем обращаться к задекорированной
функции, в которой перманентно будет лежать какое-то значение.
'''


def func(name):
    def inner_func():
        print('Hi', name)
    return inner_func


a = func('Masha')
b = func('Petia')

a()
b()


def adder(value):
    '''
    Аналогично, функция adder единожды записывает какое-то значение, а затем каждый вызов переменной это значение
    будет плюсоваться к переданному аргументы. Просто еще один пример.
    '''
    def func2(a):
        print(value + a)
    return func2


a = adder(5)
a(5)
