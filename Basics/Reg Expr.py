import re


r'''
match - ищет последовательность в начале строки
search - ищет первое совпадение с шаблоном
findall - ищет все совпадения с шаблоном. Возвращает результирующие строки в виде списка
finditer - ищет все совпадения с шаблоном. Возвращает итератор
compile - компилирует регулярное выражение. К этому объекту затем можно применять все перечисленные функции
fullmatch - вся строка должна соответствовать описанному регулярному выражению
sub - для замены в строках
split - для разделения строки на части

Вызывается: re.match(a, b)

re – Библиотека для работы с регулярными выражениями

. – один любой символ, кроме новой строки \n.
\d – соответствует любой одной цифре и заменяет собой выражение [0-9];
\D – исключает все цифры и заменяет [^0-9];
\w – заменяет любую цифру, букву, а также знак нижнего подчёркивания;
\W – любой символ кроме латиницы, цифр или нижнего подчёркивания;
\s – соответствует любому пробельному символу;
\S – описывает любой непробельный символ;
\b – Начало или конец слова (слева пусто или не-буква, справа буква и наоборот). В отличие от предыдущих соответствует позиции, а не символу
\B – Не граница слова: либо и слева, и справа буквы, либо и слева, и справа НЕ буквы
[] – ищет\заменяет все внутри. Может принимать диапазон [1-5A-Za-z] (это 3 диапазона, херово записывается)
*буква ё не включается в диапазон а-я, её надо включать отдельно
[^] – любой символ, кроме указанных [^а] – кроме а
{} – указывает число повторений предыдущего символа {1}{2}{3}...
{1, 5} – от 1 до 5 повторений
{2,} – не менее 2 повторений
{,5} – не более 5 повторений
? – Ноль или одно вхождение, синоним {0,1}
* – Ноль или более, синоним {0,}
+ – Одно или более, синоним {1,}



Примеры:
\d{5} – любые 5 цифр
\d\d/\d\d/\d{4} – даты в формате дд/мм/гггг. Можно переписать так: \d{2}/\d{2}/\d{4}
'''


def any_3_letters_words():
    '''Поиск любые пять цифер'''
    s = 'asd44444asdasd555555555577777888 asasdd asd dsa asdfasfjhsf fff'
    pattern = r'\b\w{3}\b'
    res = re.findall(pattern, s)
    print(res)

any_3_letters_words()


def replace():
    '''Замена элемента в строке. Чувствительна к регистру'''
    s = 'Привет, привет, Привет'
    s = re.sub('Привет', 'пока', s)
    print(s)

#replace()


def list_of_letters():
    '''Выплевывает список со всеми буквами. Игнорирует пунктуацию.'''
    s = 'Привет, меня зовут Аркаша'
    pattern = r'\w'
    res = re.findall(pattern, s)
    print(res)

#list_of_letters()


def list_of_words():
    '''Выплевывает список слов'''
    s = 'Привет, меня зовут Аркаша'
    pattern = r'\w+'
    res = re.findall(pattern, s)
    print(res)

#list_of_words()


def list_of_words_with_spaces():
    '''Список слов, после которых есть пробел'''
    s = 'Привет, меня зовут Аркаша'
    pattern = r'\w+\s'
    res = re.findall(pattern, s)
    print(res)

#list_of_words_with_spaces()


def long_pattern_search():
    s = 'Добрый день, меня зовут Господин Аркадий А.А.'
    pattern = r'[А-Яа-я]+\s'
    res = re.findall(pattern, s)
    print(res)

#long_pattern_search()


def find_all_5_num():
    '''Поиск любые пять цифер'''
    s = 'asd44444asdasd555555555577777888'
    pattern = r'\d{5}'
    res = re.findall(pattern, s)
    print(res)

#find_all_5_num()