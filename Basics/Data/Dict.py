'''
Словари - это изменяемый упорядоченный тип данных, но ключ должен быть объектом неизменяемого типа: число, строка,
кортеж, а значение может быть данными любого типа.


'''


d = {}  # создание пустого словаря

d = {'a':1, 'b':2}  # не пустого словаря

d = dict(short='dict', long='dictionary')  # с помощью функции dict
d = dict([(1, 1), (2, 4)])
d = dict.fromkeys(['a', 'b'])  # с помощью метода fromkeys (в значениях будет None)
d = dict.fromkeys(['a', 'b'], 100)  # в значениях будет 100 для всех ключей

d = {a: a ** 2 for a in range(7)}  # с помощью генератора
print(d)



# ПОЛЕЗНЫЕ МЕТОДЫ

'''copy() позволяет создать копию словаря, тогда как обычное присвоение (dict1 = dict2) лишь создаст новую ссылку,
изменение одного объекта приведет к изменению другого'''

a = d.copy()

'''get() возвращает из словаря значение по ключу, а если значения нет, то возвращает None, тогда как обычное обращение
по типу a[some_key] вернет ошибку, если такого ключа нет. Также get может вернуть что-нибудь другое, если его попросить'''

print(a.get('555', 'Ooops'))

'''Метод setdefault() ищет ключ, и если его нет, вместо ошибки создает ключ со значением None. Если ключ есть,
setdefault возвращает значение, которое ему соответствует.'''

a.setdefault('555')
print(a)

'''Второй аргумент позволяет указать, какое значение должно соответствовать ключу:'''
a.setdefault('444', 'asd')
print(a)

'''keys, values, items позволяют смотреть понятно что. Но, если записать их результат в переменную, изменить словарь и
заново позвать ту переменную, то значение в ней изменится:'''

keys = a.keys()
print(keys)
a['another_key'] = 'another_value'
print(keys)

