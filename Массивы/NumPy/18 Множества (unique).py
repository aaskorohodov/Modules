import numpy as np


'''Множества в NumPy не отличаются от обычных массивов, это они и есть, просто очищенные от повторов.'''


a = np.array([1,2,3,3,2,1,10])
seta = np.unique(a)
print(seta)  # [1 2 3]

print(np.unique(a, return_counts=True))  # (array([1, 2, 3]), array([2, 2, 2], dtype=int64))
'''Выше вернулось очищенное множество, а также второй массив = число повторов элементов'''

print(np.unique(a, return_index=True))  #(array([ 1,  2,  3, 10]), array([0, 1, 2, 6], dtype=int64))
'''Вернулись индексы первого вхождения элемента'''

print(np.unique(a, return_inverse=True))  #(array([ 1,  2,  3, 10]), array([0, 1, 2, 2, 1, 0, 3], dtype=int64))
'''Вернулись индексы всех элементов в исходном массиве. По ним можно восстановить исходный массив:'''

setA, indexA = np.unique(a, return_inverse=True)
print(setA[indexA])  # [ 1  2  3  3  2  1 10] – исходный массив


# с двумерными тоже работает, возвращает одномерный массив уникальных элементов:
x = np.array([[0, 1, 1, 2],[0, 1, 1, 2],[9, 1, 1, 2]])
np.unique(x)  # array([0, 1, 2, 9])

# можно отбирать уникальные строки:
np.unique(x, axis=0)
# array([[0, 1, 1, 2],
#        [9, 1, 1, 2]])
# были ликвидированы одинаковые строки, остались только разные

# уникальные столбцы:
np.unique(x, axis=1)
# array([[0, 1, 2],
#        [0, 1, 2],
#        [9, 1, 2]])
# повторялся столбец из единичек


'''Можно посмтореть, какие вхождения в одном массиве есть в другом (что повторяется, что нет):'''
x = np.array([0, 1, 2, 3])  # уникальный только 0б остальное повторяется в следующем массиве
y = np.array([1, 2, 3, 4, 5, 6, 7, 8])
np.in1d(x, y)  # array([False,  True,  True,  True])


'''Пересечение множеств'''
np.intersect1d(x, y)  # array([1, 2, 3]) – 1,2,3 есть и в том и в другом множестве

'''Объединение множеств – получаем множество, в котором нет повторов:'''
np.union1d(x, y) # array([0, 1, 2, 3, 4, 5, 6, 7, 8])

'''Вычитание множеств – можно вычитать одно из другого или наоборот:'''
np.setdiff1d(x, y) # array([0])
np.setdiff1d(y, x) # array([4, 5, 6, 7, 8])

'''Симметричная разность (XOR) – останутся уникальные элементы, повторы удаляются:'''
np.setxor1d(x, y) # array([0, 4, 5, 6, 7, 8]) 123 были как в одном, так и в другом множестве
