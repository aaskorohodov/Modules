import numpy as np


'''Создание матрицы с генераторами списков'''


a = np.array( [0]*10 )
print(a)

a = np.array( [x for x in range(10)] )
print(a)

a = np.array( [[0]*5]*2 )
print(a)


'''Более быстрые по времени исполнения методы:

empty(shape, …)
Возвращает новый массив заданного размера и типа данных, но без определенных значений.

eye(N, M=None, …)
Возвращает массив размером NxMс единичными диагональными элементами (остальные элементы равны нулю).

identity(n, …)
Возвращает квадратный массив размерностью nxn с единичными элементами по главной диагонали (остальные равны нулю).

ones(shape, …)
Возвращает массив заданного размера и типа, состоящего из всех единиц.

zeros(shape, …)
Возвращает массив заданного размера и типа, состоящего из всех нулей.

full(shape, value, …)
Возвращает массив заданного размера и типа со значениями value.
'''


a = np.empty(10, dtype='int16')  # произвольные цифры
a = np.empty((3,2), dtype='int16')  # произвольные цифры

a = np.eye(4)  # указываем размерность (тут симметричная 4х4), создается матрица, с 1 по диагонали, остальное нули.
a = np.eye(4,2)  # а тут не симметричная, а заданная. Единица будет "типо по диагонали", до куда можно провести


a = np.identity(5)  # похоже, аналогичен eye с указанным 1 числом (симметричная матрица с 1 по диагонали)

a = np.zeros( (2,3,4) ) # указываем размерность, получаем только нули

a = np.ones( [2,3] )  # аналогично, только с единицами

a = np.full( [2,3], 'Hello')  # аналогично, только сами указываем чем заполнить

# print(a)



'''
Матрицы по правилам:

mat(object, …)
Приводит входные данные object к матрице, если это возможно. Параметр object может быть строкой, списком или кортежем.

diag(list, …)
Формирует диагональную матрицу на основе списка или массива NumPy. В последних версиях возвращает копию массива (а не его представление).

diagflat(list, …)
Формирует диагональную матрицу из списка list, который сначала сжимает до одной оси (преобразует в одномерный список или массив).

tri(N, M=None, …)
Создает треугольный массив NxM с единицами на главной диагонали и ниже ее.

tril(list, …)
Преобразует двумерный список или массив list в треугольную матрицу с нулевыми элементами выше главной диагонали.

triu(list, …)
Преобразует двумерный список или массив list в треугольную матрицу с нулевыми элементами ниже главной диагонали.

vander(list, N=None, …)
Создание матрицы Вандермонда из одномерного списка или массива list. Второй параметр N определяет число столбцов (по умолчанию формируется квадратная матрица).

'''


a = np.mat('1 2 3 4')  # матрица 1х4 из строки

a = np.mat('1 2; 3 4')  # матрица 2х2 из строки

a = np.mat([5, 4, 3])  # из списка
a = np.mat( [(1,2,3), (4,5,6)])  # из списка кортежей


a = np.diag( [1,2,3,4] )  # указанные элементы пойдут по диагонали, все остальное нули

a = np.diag([(1,2,3), (4,5,6), (7,8,9)])  # тут наоборот, матрица создается только из "диагональных" значений

a = np.diagflat([(1,2,3), (4,5,6), (7,8,9)])  # будет аналогично нижнему, по диагонали встанут переданные числа
a = np.diagflat([1,2,3,4,5,6,7,8,9])

a = np.tri(4)  # диагональ = 1, все под диагональю = 1, все выше диагонали = 0
a = np.tri(4,2) # аналогично, только произвольная размерность, все диагональ не видна

a = np.array([(1,2,3), (4,5,6), (7,8,9)])
b = np.tril(a)  # превратит матрицу выше в треугольную, все выше оси станет 0, остальное без изменений
c = np.triu(a)  # аналогично, только элементы ниже диагонали станут нулями

a = np.tril([1,2,3,4])  # по диагонали 1234, выше нули, снизу 12, 123, 1234 (типо заполняется сверху вниз)
# print(a)



'''
Функции формирования числовых диапазонов

arange()
Возвращает одномерный массив с равномерно разнесенными числами указанного диапазона.

linspace(start, stop, …)
Возвращает одномерный массивcравномерно разнесенными числами, используя только значения начала и конца интервала.

logspace(start, stop, …)
Возвращает одномерный массив с числами, равномерно распределенных по логарифмической шкале.

geomspace(start, stop, …)
Формирование чисел по геометрической прогрессии.

meshgrid(x1, ..., xn, …)
x1, ..., xn – одномерные последовательности или массивы, используемые для формирования координатной сетки по каждой из осей.

mgrid[]
Возвращает массив плотных координатных сеток.

ogrid[]
Возвращает открытую сетку значений.
'''


a = np.arange(5)  # аналогично range
a = np.arange(1, 5)
a = np.arange(1, 5, 0.5)  # последнее = шаг. Тут можно ставить дроби, в обычном range так нельзя
a = np.arange(1, np.pi, 0.1)  # pi = число Пи

a = np.cos(np.arange(0, np.pi, 0.1))  # косинус для заданных углов

a = np.linspace(0, 9, 3) # первое значение = начало отсчета, второе = конец, третье = на сколько кусков это разбить



'''
На основе каких-то данных:


array(object, …)
Преобразует список или кортеж object в массив NumPy.

asanyarray(list, …)
Преобразует список list в массив array, сохраняя тип подкласса.

ascontiguousarray(list, …)
Возвращает непрерывный массив в памяти, подобно как это организовано в языке C.

asmatrix(list, …)
Преобразует входную последовательность list в матрицу NumPy (тип matrix).

copy(list, …)
Возвращает копию массива list (если это объект NumPy) или просто создает массив на основе списка языка Python.

frombuffer(buffer, …)
Преобразует данные из буфера в массив NumPy

fromfile(file, …)
Возвращает массив из данных текстового или бинарного файла file.

fromfunction(func, shape, …)
Создает массивразмерностью shape с помощью функции func.

fromiter(iter, …)
Создает массив на основе итерируемого объекта.

fromstring(string, …)
Создает массив из данных строки.

loadtxt(file, …)
Формирует массив из данных текстового файла. 
'''

a = np.array( [ [1,2,3], [4,5,6] ] )

b = np.copy(a)  # копирование

a = np.fromiter("hello", dtype='U1')  # матрица из итерируемого объекта


def getRange(N):
    for i in range(N):
        yield i


a = np.fromiter(getRange(4), dtype='int8')  # из генератора

a = np.fromstring('1 2 3', dtype='int16', sep= ' ')
a = np.fromstring('1, 2, 3', dtype='int16', sep= ',')
print(a)